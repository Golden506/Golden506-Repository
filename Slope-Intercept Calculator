//Uses special calculations to get a slope-intercept equation from two points on a line, or from a point and a slope.

#include <cs50.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

int main(int argc, string argv[])
{

    if(strcmp(argv[1],"help") == 0 || strcmp(argv[1],"twopoint") == 0 || strcmp(argv[1],"pointslope") == 0)
    {
        //Lots of varaibles. mathvar is just for storing values during calculations so I can overwrite other variables.
        float x1;
        float y1;
        float x2;
        float y2;
        float slope;
        float intercept;
        float mathvar;
        if(strcmp(argv[1],"twopoint") == 0)
        {
            //This code gets input for coordinate values.
            x1 = get_float("Input X value of coordinate 1: \n");

            y1 = get_float("Input y value of coordinate 1: \n");

            x2 = get_float("Input x value of coordinate 2: \n");

            y2 = get_float("Input y value of coordinate 2 \n");
            //All the math is done here. First it does the slope, then the intercept.
            mathvar = y2-y1;
            slope = mathvar;
            mathvar = x2-x1;
            slope = slope/mathvar;

            intercept = y1 - slope * x1;
            //This one prints out the answer. The if-else modifier just fixes issues with it adding negatives and stuff like that.
            //The answer is the same/either way, this just makes it look neater.
            if(intercept < 0)
            {
                printf("y=%fx%f\n", slope, intercept);
            }
            else
            {
                printf("y=%fx+%f\n", slope, intercept);
            }
            return 0;
        }
        if(strcmp(argv[1],"pointslope") == 0)
        {
            //These prompts get variable data for point-slope calculations.
            slope = get_float("Input Slope: \n");

            x1 = get_float("Input X value of coordinate 1: \n");

            y1 = get_float("Input y value of coordinate 1: \n");

            intercept = y1 - slope * x1;

            //This one prints out the answer. The if-else modifier just fixes issues with it adding negatives and stuff like that.
            //The answer is the same/either way, this just makes it look neater.
            if(intercept < 0)
            {
                printf("y=%fx%f\n", slope, intercept);
            }
            else
            {
                printf("y=%fx+%f\n", slope, intercept);
            }
            return 0;
        }
        if(strcmp(argv[1],"help") == 0)
        {
            printf("This program can be used to get a slope-intercept equation when given data about a table or graph. Use './slope twopoint' to calculate a slope-intercept equation from two points,");
            printf(" or use './slope pointslope' to calculate a \nslope-intercept equation from a single point and a slope.\n");
            return 0;
        }
    }
    else
    {
        eprintf("Error - Please provide appropriate input. Execute './slope help' for help.\n");
        return 1;
    }
}
